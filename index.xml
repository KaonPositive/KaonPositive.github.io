<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jared Rosario</title>
    <link>https://kaonpositive.github.io/</link>
    <description>Recent content on Jared Rosario</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 10 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kaonpositive.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Archive - Basics</title>
      <link>https://kaonpositive.github.io/posts/theme-documentation-basics/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/theme-documentation-basics/</guid>
      <description>Installation The following steps are here to help you initialize your new website. If you donâ€™t know Hugo at all, we strongly suggest you learn more about it by following this great documentation for beginners.
a. Create Your Project Hugo provides a new command to create a new website:
hugo new site my_website cd my_website b. Install the Theme The themeâ€™s repository is: https://github.com/526avijitgupta/gokarna.
You can download the latest release ðŸ“š .</description>
    </item>
    
    <item>
      <title>Archive - Advanced</title>
      <link>https://kaonpositive.github.io/posts/theme-documentation-advanced/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/theme-documentation-advanced/</guid>
      <description>Content Types This theme supports two types of content types: post and page. To specify them, you need to add them in your markdown metadata.
Post This is the default blog post type which will be shown in your &amp;ldquo;Posts&amp;rdquo; section and who&amp;rsquo;s tags will be indexed. Basically, a normal blog post.
--- title: &amp;#34;Hello, world!&amp;#34; date: 2021-01-01 description: &amp;#34;A blog post&amp;#34; image: &amp;#34;/path/to/image.png&amp;#34; type: &amp;#34;post&amp;#34; tags: [&amp;#34;blog&amp;#34;] --- # Hello World!</description>
    </item>
    
    <item>
      <title>Archive - Markdown Syntax</title>
      <link>https://kaonpositive.github.io/posts/markdown-syntax/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/markdown-syntax/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>STATS 411 Notes 02</title>
      <link>https://kaonpositive.github.io/posts/stats411notes02/</link>
      <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/stats411notes02/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CS456 Notes 02</title>
      <link>https://kaonpositive.github.io/posts/cs456notes02/</link>
      <pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs456notes02/</guid>
      <description>Related Question: How do you know the given DFA has the smallest number of states?
 Often more than one DFA can be there that recognize the same language.  DFA Minimization Algorithm:  Construct a table being indexed by non-final and final states.   Mark all non-final and final pairs (each pair does not have to be connected to one another; as long as they are non-final and final pairs).</description>
    </item>
    
    <item>
      <title>CS456 Notes 03</title>
      <link>https://kaonpositive.github.io/posts/cs456notes03/</link>
      <pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs456notes03/</guid>
      <description>What is a Regular Expression? It is a way of denoting/describing languages. EX: $(0{\cup}1)0^*$ is an example of a regular expression. Says that the language starts with a 0 or a 1 followed by any number of 0s.
Rules for regular expression:
 Empty set ${\empty}$ is a regular expression and denotes language ${\empty}$. Empty string ${\lambda}$ is a regular expression denoting set {${\lambda}$}. Each alphabet a is a regular expression and denotes the set {${a}$}.</description>
    </item>
    
    <item>
      <title>CS 422 Notes 04</title>
      <link>https://kaonpositive.github.io/posts/cs422notes05/</link>
      <pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422notes05/</guid>
      <description>Random Variables It is a variable that has unknown/random quantity of interest.
${\mathcal X}$: the set of all possible values. Also called a sample space or static space.
Discrete Random Variables Sample space is finite/countably infinite (${\mathcal X}$). Probability of event X = x is denoted by $P(X=x)$ or $P(x)$ for short.
 x: Random Variable (ex: heads/tails) ${\mathcal X}$: Sample Space (ex: S={Heads, Tails}) x (small x) -&amp;gt; x: one of the possible values (ex: x=heads, or x = tails)  Continuous Random Variables If x (a random variable) ${\in\mathbb{R}}$ is a real-valued quantity, it is called a continous random variable.</description>
    </item>
    
    <item>
      <title>CS 422 Notes 04</title>
      <link>https://kaonpositive.github.io/posts/cs422notes04/</link>
      <pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422notes04/</guid>
      <description>Probability Probability quantifies uncertainty.
 Probability is between 0 and 1.
 P(A): Probability that the event A will occur.
 0 &amp;lt;= P(A) &amp;lt;= 1  P(${A&#39;}$): Probability that the event A will NOT occur.
 $0 &amp;lt;= P({A^c}) &amp;lt;= 1$ $P(A) + P({A^c}) = 1$ $P({A^c}) = 1 - P(A)$  Joint Probability Define probability of two events occuring at the same time. ${P(A \cap B}) = P(A, B)$</description>
    </item>
    
    <item>
      <title>CS 422 Notes 03</title>
      <link>https://kaonpositive.github.io/posts/cs422notes03/</link>
      <pubDate>Thu, 14 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422notes03/</guid>
      <description>What is Unsupervised Learning? It is a learning model where it is trained ONLY on the inputs.
 REMEMBER: Supervised learning uses input-output pairs to parameterize the model for improvement.
  Ex of Unsupervised Learning: Music recommendations by using clusters of users that have similar music taste.  What is Clustering? No classification exists to determine data clusters. Therefore, it is a challenge to separate data in their respective classes/groups.</description>
    </item>
    
    <item>
      <title>CS 422 Notes 02</title>
      <link>https://kaonpositive.github.io/posts/cs422notes02/</link>
      <pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422notes02/</guid>
      <description>$ {y_n} = f({x_n})$ where $f$ is the fuction we assume exist and try to approximate.
$ \hat{y_n} = f^({x_n})$ where $ \hat{y_n} $ is the prediction and $ f^ $ is the model&amp;rsquo;s approximation.
If we try to get comparisons for a data instance, we try to find the best line that fits the data instance the best.
 Ex: you will prefer a function over another function since data is closests to it.</description>
    </item>
    
    <item>
      <title>CS 477 Notes 01</title>
      <link>https://kaonpositive.github.io/posts/cs477notes01/</link>
      <pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs477notes01/</guid>
      <description>notes</description>
    </item>
    
    <item>
      <title>STATS 411 Notes 01</title>
      <link>https://kaonpositive.github.io/posts/stats411notes01/</link>
      <pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/stats411notes01/</guid>
      <description>notes</description>
    </item>
    
    <item>
      <title>Leetcode Doc</title>
      <link>https://kaonpositive.github.io/posts/leetcode/</link>
      <pubDate>Sun, 10 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/leetcode/</guid>
      <description>notes</description>
    </item>
    
    <item>
      <title>CS456 Notes 01</title>
      <link>https://kaonpositive.github.io/posts/cs456notes01/</link>
      <pubDate>Thu, 07 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs456notes01/</guid>
      <description>What is a Finite State Machine/Finite Automata? What is a Power-Set? Power set of ${2^s}$ of set s is the set of all subsets of S. Examples: ${S_1} = $ {a, b} ${2^{S_1}} = $ {{a}, {b}, {ab}, {0}} ${2^2} = 4$ total elements
${S_2} = $ {a, b, c} ${2^{S_2}} = $ {{0}, {a}, {b}, {c}, {a,b}, {a,c}, {b,c}, {a,b,c}, } ${2^3} = 8$ total elements
What are features of deterministic accepters?</description>
    </item>
    
    <item>
      <title>CS 422 Notes 01</title>
      <link>https://kaonpositive.github.io/posts/cs422notes01/</link>
      <pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422notes01/</guid>
      <description>Supervised Learning continued&amp;hellip;  x $ {\in} $ X (capital X is the input space) y $ {\in} $ Y (capital Y is the output space)   Basically, the input space is the set of possible inputs; output space is the set of possible outputs.
  D = {(${x_n}, {y_n}$)}${_n}^{N}$ is the set of all input-output pairs.  N is the dataset size and D is script D.</description>
    </item>
    
    <item>
      <title>STATS 411 Notes 00</title>
      <link>https://kaonpositive.github.io/posts/stats411notes00/</link>
      <pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/stats411notes00/</guid>
      <description>What are Individuals/subjects/objects? They are units described by a set of data.
 These units can be people, things, animals, companies, etc. They are actual nouns.
  Examples of individuals/subjects/objects: Freshman students, companies, cells, etc.  What are variables? They are characteristics of individuals/subjects/objects. They can either be qualitative or quantitative (categorical)
 Quantitative: can be counted (number of things)  Ex: age (in years), length (in m), number of children, etc.</description>
    </item>
    
    <item>
      <title>CS 422 Notes 00</title>
      <link>https://kaonpositive.github.io/posts/cs422notes00/</link>
      <pubDate>Thu, 31 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422notes00/</guid>
      <description>What is Machine Learning? By definition from Tom Mitchell:
 A computer program is learning form experience E w/ respect to some class of tasks T, and performance measure P, if its performance at tasks in T, as measured by P, improves w/ experience E.
 Breaking it down into simple terms&amp;hellip;
 You improve over tasks T.   Ex: Predicting the price of the house in the market.  W/ repect to some performance P   Ex: How much the house is sold for.</description>
    </item>
    
    <item>
      <title>CS 477 Notes 00</title>
      <link>https://kaonpositive.github.io/posts/cs477notes00/</link>
      <pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs477notes00/</guid>
      <description>Types of Running Time:  O(n) - Worst-case Running Time   f(n) = O(g(n)) Grows no faster than n Describes the upper bound It is the maximum number of steps taken in any instance of size n&amp;ndash;calculates the maximum time an algorithm takes to complete execution. Formal Definition of O(n):  f(n) &amp;lt;= c*g(n) for all n &amp;gt;= n0 where n0 can be some number greater than 0 and c is some constant Ex: f(n) = 2n + 3; g(n) = n 2n + 3 &amp;lt;= 10n, which is true    $ \Omega $(n) - Best-case Running Time   f(n) = $ \Omega $(g(n)) Grows at least as fast as n Describes the lower bound Calculates the shortest time an algorithm takes to complete execution Formal Definition of $ \Omega $(n):  f(n) &amp;gt;= c*g(n) for all n &amp;gt;= n0 where n0 can be some number greater than 0 and c is some constant    $ \Theta $(n) - Expected-case Running Time   f(n) = $ \Theta $(g(n)) Means both $ \Omega $(n) and O(n) Gives the average bound (expresses lower and upper bound of algorithm&amp;rsquo;s run time).</description>
    </item>
    
    <item>
      <title>CS456 Notes 00</title>
      <link>https://kaonpositive.github.io/posts/cs456notes00/</link>
      <pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs456notes00/</guid>
      <description>What is an alphabet?  It is a non-empty finite set of symbols. Use ${\Sigma}$ to denote the alphabet. Ex:  $\Sigma$ = {0,1} $\Sigma$ = {a, b, c} $\Sigma$ = {a, b, c, &amp;hellip; z}    What is a string?  It is a finite sequence of symbols from an alphabet. Ex: $\Sigma$ = {a, b, c}  w1 = &amp;ldquo;abc&amp;rdquo; - This is a string of 3 symbols.</description>
    </item>
    
    <item>
      <title>Integrals</title>
      <link>https://kaonpositive.github.io/posts/integrals/</link>
      <pubDate>Sun, 27 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/integrals/</guid>
      <description>Integration by Parts Guidelines for selecting u and dv:   Remember &amp;ldquo;L-I-A-T-E&amp;rdquo; where you choose &amp;ldquo;u&amp;rdquo; to be the function that comes first in the list.
 L - Logrithmic Function I - Inverse Trig Function A - Algebraic Function T - Trig Function E - Exponential Function   Example:     Alternative Guidelines for Choosing u and dv:
 dv is the complicated portion of the integrand that can easily be integrated.</description>
    </item>
    
    <item>
      <title>Binary Trees</title>
      <link>https://kaonpositive.github.io/posts/binarytrees/</link>
      <pubDate>Sat, 26 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/binarytrees/</guid>
      <description>What is a binary tree? It is a recursive, non-linear tree data structure where one node is designated as the root and the others are called the children of the root. Each node has AT MOST two children.
What does each node have?  Each node in the tree must have:  Data: Holds the value/data of the associated node Pointer to the left child Pointer to the right child.    C++ Code Example:</description>
    </item>
    
    <item>
      <title>Linked List</title>
      <link>https://kaonpositive.github.io/posts/linkedlist/</link>
      <pubDate>Sat, 26 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/linkedlist/</guid>
      <description>What is a linked-list?  It is a non-contiguous linear data structure where a sequence of nodes are connected to one another via a reference pointer. Each node stores the data and address of the next node.  What does each node have?  A node in a linked-list typically have two components:  Data: Holds the value/data of the associated node Next Pointer: Stores memory address (reference pointer) of the next node in the sequence Head and Tail: The head node will be the way to access the linked list&amp;ndash;it points to the first node of the list.</description>
    </item>
    
    <item>
      <title>Algorithms</title>
      <link>https://kaonpositive.github.io/posts/algos/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/algos/</guid>
      <description>What is an algorithm?  Sequence of steps that transform input into output.  What is time complexity of an algorithm?  Indicates total time needed by program to run to completion. Expressed by using Big O notation.  What are the types of notation used for time complexity?  Big Oh: Fewer than or same as iterations. Big Omega: More than or same as iterations. Big Theta: Same as iterations.</description>
    </item>
    
    <item>
      <title>Design Patterns</title>
      <link>https://kaonpositive.github.io/posts/designpatterns/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/designpatterns/</guid>
      <description>What is Abstract Factory?  Provide an interface for creating families of related or dependent objects without specifying their concrete classes.  What is an Adapter?  Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn&amp;rsquo;t otherwise because of incompatibility interfaces.  What is a Bridge?  Decouple an abstraction from its implementation so that the two can very independetly.  What is a builder?</description>
    </item>
    
    <item>
      <title>OA Notes</title>
      <link>https://kaonpositive.github.io/posts/oanotes/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/oanotes/</guid>
      <description>review data structures and algorithms.
 strings, lists, trees, queues, stacks, graphs, heaps, hash tables, and hash maps. sorts, searches, recursion, iterative approaches, and traversals (BFS and DFS) understand basic programming concepts time yourself as you will have 120 minutes to complete the assessment. practice different types of questions in the Candidate Prep on HackerRank  </description>
    </item>
    
    <item>
      <title>Stacks and Queue</title>
      <link>https://kaonpositive.github.io/posts/stacksandqueues/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/stacksandqueues/</guid>
      <description>information about stacks and queues.</description>
    </item>
    
    <item>
      <title>Study Plan 75</title>
      <link>https://kaonpositive.github.io/posts/studyplan75/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/studyplan75/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Time Complexity</title>
      <link>https://kaonpositive.github.io/posts/timecomplexity/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/timecomplexity/</guid>
      <description>What is time complexity?   It is the measure of how long an algorithm will run as the size of the input increases&amp;ndash;this examines the proportional time of the largest components of the algorithm.
 Proportional Time: Only being mindful of the running-time of an input of size n, NOT the running-time for a specific input. Example:  int sum{}; for( const auto i : arr ) if( num % 2 == 0 ) sum += num; return sum;  Note: In this example, the loop will iterate the entire array once, so it runs directly proportional to n (linear run time).</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://kaonpositive.github.io/posts/aboutme/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/aboutme/</guid>
      <description>My name is Jared Rosario and I am a 22 year old that was born in San Jose, California. I&amp;rsquo;m passionate about coding and music. For most of my free time, I&amp;rsquo;m either coding exciting projects or scrolling through my music library to find the perfect track to fit my mood. I&amp;rsquo;ve been coding since my early years, and I&amp;rsquo;m always striving to be better. I love to learn new things and build things from scratch, and I&amp;rsquo;m always seeking out new opportunities to advance my skills.</description>
    </item>
    
    <item>
      <title>Data Structures</title>
      <link>https://kaonpositive.github.io/posts/datastructures/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/datastructures/</guid>
      <description>What is a data structure?  Used for organization and modification of data.  What are the two types of data structures?  Linear: Elements result in a sequence or linear list. Examples: arrays, linked lists, stacks, etc. Non-linear: Traversal of nodes is not done in a sequential manner. Examples: trees, graphs, etc.  What is an array?  A collection of the same data type that are stored at contiguous memory locations (memory locations are adjacent to each other in memory).</description>
    </item>
    
    <item>
      <title>Discord Bot</title>
      <link>https://kaonpositive.github.io/projects/discordbot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/projects/discordbot/</guid>
      <description>Info Made a discord bot named &amp;ldquo;eric&amp;rdquo; using discord.py and GPT-3 APIs.</description>
    </item>
    
    <item>
      <title>Video Game (using python)</title>
      <link>https://kaonpositive.github.io/projects/videogamepy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/projects/videogamepy/</guid>
      <description>Info Made a video game using python.</description>
    </item>
    
    <item>
      <title>Web Scrapper</title>
      <link>https://kaonpositive.github.io/projects/webscrapper/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/projects/webscrapper/</guid>
      <description>Info Made a web scrapper in GOLang as a project.</description>
    </item>
    
  </channel>
</rss>
