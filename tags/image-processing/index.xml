<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>image processing on Jared Rosario</title>
    <link>https://kaonpositive.github.io/tags/image-processing/</link>
    <description>Recent content in image processing on Jared Rosario</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 22 Apr 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://kaonpositive.github.io/tags/image-processing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CS 460 Final Study Guide</title>
      <link>https://kaonpositive.github.io/posts/cs460finalstudyguide/</link>
      <pubDate>Mon, 22 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs460finalstudyguide/</guid>
      <description>Additional guide here.
FIRST Sets * Terminal - lowercase letters; symbols of a language Non-terminal - uppercase letters; each letter represents a language.
 if X -&amp;gt; epsilon, then FIRST(X) = {epsilon} For any terminal a, then FIRST(a) = {a} For a production rule $X \rightarrow Y_1Y_2Y_3$:   if $\epsilon \notin FIRST(Y_1)$, then $FIRST(X) = FIRST(Y_1)$ if $\epsilon \in FIRST(Y_1)$ then $FIRST(X) = {FIRST(Y_1) - \epsilon } \cup FIRST(Y_2Y_3)$  Eliminating Left Recursion Direct Left Recursion  Find bodies of all nonterminal A production w/ left recursion and delete them.</description>
    </item>
    
    <item>
      <title>CS 469 Notes 14</title>
      <link>https://kaonpositive.github.io/posts/cs469notes15/</link>
      <pubDate>Mon, 22 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes15/</guid>
      <description>Lecture Image Compression In terms of image compression, we use Huffman Coding.
YCbCr = Y is for luminance; Cb is for chrominance blue; Cr is for chrominance red
JPEG Encoder Steps:
 Preprocessing Dividing int NxN blocks Transform each block (Y, Cb, Cr) from spatial to frequency domain. Quantization Encoding (Huffman)  Forward Transformation Transforms image/iamge blocks from
There are 3 transformation approaches:
 DFT DCT KLT  Reading Summary </description>
    </item>
    
    <item>
      <title>CS 469 Notes 12</title>
      <link>https://kaonpositive.github.io/posts/cs469notes12/</link>
      <pubDate>Wed, 27 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes12/</guid>
      <description>Lecture Image Segmentation Edge - a rapid change in image intensity or a discontinuity in pixel value.
In edge detection, it requires the use of first and second derivatives.
 First Derivative - produces a thick edge profile. Second Derivative - produces a double-edge profile w/ a sign change  If noises are present in an image, noise must be reduced if edge detection is going to be used.
Edge Detection Algorithms  Image Gradient - measures the change in intensity across the image; derivatves on the x and y directions; also uses derivatives to calculate magnitude and direction of edges within an image.</description>
    </item>
    
    <item>
      <title>CS 469 Notes 13</title>
      <link>https://kaonpositive.github.io/posts/cs469notes13/</link>
      <pubDate>Wed, 27 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes13/</guid>
      <description>Lecture Region Growing It is a procedure that groups pixels or subregions into larger regions.
Region Growing is useful for:
 Segmenting images where regions of interests are not clearly defined by edges. Images has varying intensity levels that make traditional thresholding ineffective.  Images as Graphs  Graph Representation - Image can be modeled as a graph G=(V,E), where: V is a set of nodes representing pixels or pixel clusters.</description>
    </item>
    
    <item>
      <title>CS 469 Notes 14</title>
      <link>https://kaonpositive.github.io/posts/cs469notes14/</link>
      <pubDate>Wed, 27 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes14/</guid>
      <description>Lecture Image Compression JPEG - a form of image compression.
Code - a list of symbols (letters, numbers, bits, etc.) Code word - a sequence of symbols used to represent some information (ex: gray levels) Code worth length - number of symbols in a code word.
In terms for coding redundancy, assume you have a discrete random variable $r_k$ where it is an interval [0, L-1]. It is used to represent the intensities of an $M * N$ image.</description>
    </item>
    
    <item>
      <title>CS 469 Notes 10</title>
      <link>https://kaonpositive.github.io/posts/cs469notes11/</link>
      <pubDate>Mon, 25 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes11/</guid>
      <description>Lecture Boundary Extraction - can be obtained by eroding A (set of foreground pixels) by a suitable structuring element, B. Performs the set difference between A and its erosion. $\beta(A) = A - (A \ominus B)$
$(A \ominus B)$ = erosion $A$ = object
 To increase the boundary, you use a larger structuring element.
 Hole Filling It is a morphological process that is used to identify and fill the background regions that are surrounded by foreground regions in a binary image.</description>
    </item>
    
    <item>
      <title>CS 469 Notes 09</title>
      <link>https://kaonpositive.github.io/posts/cs469notes09/</link>
      <pubDate>Mon, 18 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes09/</guid>
      <description>Lecture Recall that there are three types of low pass filters:
 Ideal Butterworth Gaussian   NOTE: Equations for each of these filters can be found on canvas.
 Image Sharpening Using Highpass Frequency Filters  Edges and rapid changes correspond to high frequencies.   The Laplacian in the Frequency Domain is the second derivative of an image $f(x, y)$
Unsharp Masking and High-boost Filtering When K &amp;gt; 1, then High-boost filtering When K == 1, then unsharp masking</description>
    </item>
    
    <item>
      <title>CS 469 Notes 09</title>
      <link>https://kaonpositive.github.io/posts/cs469notes10/</link>
      <pubDate>Mon, 18 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes10/</guid>
      <description>Lecture For an image, it consists of two parts:
 Background Foreground  A Structured Element (SE) has three parameters to consider:
 How much Different Shapes Different Size   NOTE: Look back at structuring elements and the use of erosion. Example: if you have a 5 x 20 image, where 5 is the width and 20 is the height, if you want to remove the amount of pixels vertically, you do d/2; if you want to remove the amount of pixels horizontally, you do d/4.</description>
    </item>
    
    <item>
      <title>CS 469 Notes 08</title>
      <link>https://kaonpositive.github.io/posts/cs469notes08/</link>
      <pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes08/</guid>
      <description>Lecture Filtering Frequency Domain Fourier - Any periodic function can be rewritten as a weighted sum of infinite sinusoids of different frequencies.
 Periodic - signal/function repeats its values in regular intervals/periods
 Reasons why images may not be periodic:
 Limited to size There are unique content Edge limits  Fourier Series - any periodic function can be represented as the sum of sines and/or cosines of different frequencies.</description>
    </item>
    
    <item>
      <title>CS 469 Notes 07</title>
      <link>https://kaonpositive.github.io/posts/cs469notes07/</link>
      <pubDate>Mon, 26 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes07/</guid>
      <description>Lecture Image Enhancement Consists of two spatial filters:
 Smoothing (lowpass) Sharpening (highpass)  There are two types of smoothing filters:
 Linear   Box Filter Kernels Lowpass Gaussian Filter Kernels  Nonlinear   Order-Statistic Filters   IMPORTANT: In terms of box filters, if the kernel size gets bigger, then the image will be much blurier, since the average of pixels increase.
 Disadvantages of box filters:</description>
    </item>
    
    <item>
      <title>CS 469 Notes 04</title>
      <link>https://kaonpositive.github.io/posts/cs469notes04/</link>
      <pubDate>Mon, 05 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes04/</guid>
      <description>Lecture NOTE: For the log function, the reason as to why we are adding 1 to r is due to the fact that if log(0), then it would be undefined.
Recall from last lecture (Intensity Transformation): Formula for intensity transformation (or point processing): $s = T(r)$
Formula for Image Negatives: $s = (L-1)-r$
Formula for Log Transformation: $s = clog(1 + r)$
Power Law (Gamma) Transformation Formula is: $ s = cr^\gamma $ or $ s = c(r + \epsilon)^\gamma$ for $c &amp;gt; 0$ and $\gamma &amp;gt; 0$ and s and r are scaled to $[0, 1]$</description>
    </item>
    
    <item>
      <title>CS 469 Notes 05</title>
      <link>https://kaonpositive.github.io/posts/cs469notes05/</link>
      <pubDate>Mon, 05 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes05/</guid>
      <description>Lecture 7 Histogram A histogram plots how many times (frequency) each intensity value in an image occurs.
Histogram Equalization It produces a transformation function to generate an output image w/ a uniform histogram.
Histogram equalization in DIP can be categorized into two types:
 Discrete - Is the standard in digital image processing. Intensity levels of pixels are discrete values Continuous - Used in theory and simulations. Data not limited to a set of discrete values&amp;ndash;value can be within a range.</description>
    </item>
    
    <item>
      <title>CS 469 Notes 06</title>
      <link>https://kaonpositive.github.io/posts/cs469notes06/</link>
      <pubDate>Mon, 05 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes06/</guid>
      <description>Lecture Spatial Filtering It is a technique for modifying/enhancing images by manipulating the value of each pixel based on its own value and the values of surrounding neighbors.
In terms of digital image processing, a filter is a predefined matrix known as a kernel/mask/template/window.
 NOTE: the matrix will determine how to integrate a pixel w/ its neighbors to generate a new pixel value.
 Depending on the intended effect of an image, filters will vary in size, shape, and the values that they contain.</description>
    </item>
    
    <item>
      <title>CS 469 Notes 03</title>
      <link>https://kaonpositive.github.io/posts/cs469notes03/</link>
      <pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes03/</guid>
      <description>Lecture NOTE: QUIZ ON MONDAY FEB 5
Spatial Operations Set of operations include:
 Single-pixel Neighborhood Geometric  Difference between intensity transformation and spatial filtering
 Intensity Transformation - it is point-based&amp;ndash;affects each pixel independently. Spatial Filtering - neighborhood-based&amp;ndash;considers the surrounding pixels.  Intensity transformations It is also known as point processing The purpose of intensity transformations is to modify pixels values to enhance the image.
The transformation is independent of locations&amp;ndash;determined only by the intensity values.</description>
    </item>
    
    <item>
      <title>CS 469 Notes 02</title>
      <link>https://kaonpositive.github.io/posts/cs469notes02/</link>
      <pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes02/</guid>
      <description>Lecture Notes Images can be represented as:
 Surface in a 3D space Visual Intensity Array 2D Numerical Array  Representing Digital Images: Consider a continuous image with a function $f(s, t)$ Through sampling and quantization, the digital image will then be $f(x, y)$
Formula to get the coordinates of the center of the image: $(x_c, y_c) = (floor(M/2), floor(N/2))$
Two types of different image resolutions:
  Spatial Resolution (1920 x 1080) - is determined how fine/coarse the image is (ex: low spatial resolution would result in jagged lines; think of pixelated alphabets/sharp images).</description>
    </item>
    
    <item>
      <title>CS 469 Notes 01</title>
      <link>https://kaonpositive.github.io/posts/cs469notes01/</link>
      <pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes01/</guid>
      <description>Lecture Notes Why studying the human eye is important:
 Mimicking visual processes Image interpretation and design Quality Color Processing Avoiding Artifacts Human-Computer Interaction  Key Components of the Eye:
 Lens and Muscles - Focuses light onto the retina Retina - Contains photoreceptors cells (rods and cones). It is a light-sensitive layer that is in the back of the eye. Rods and cones are essentially the &amp;lsquo;sensors&amp;rsquo; that receive the light.</description>
    </item>
    
    <item>
      <title>CS 469 Notes 00</title>
      <link>https://kaonpositive.github.io/posts/cs469notes00/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes00/</guid>
      <description>Lecture Notes What is Digital Image Processing? Image - a 2D function f(x,y) where x and y represent the coordinates. f would be the amplitude for the given coordinates x and y.
 NOTE: the 2D function f(x,y) (amplitude) is called the intensity/gray level of the image.
 An image is considered a digital image when x, y, and intensity of values are all finite and discrete.
 NOTE: for an analog image: x, y, and intensity of values are continuous.</description>
    </item>
    
  </channel>
</rss>
