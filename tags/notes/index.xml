<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>notes on Jared Rosario</title>
    <link>https://kaonpositive.github.io/tags/notes/</link>
    <description>Recent content in notes on Jared Rosario</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 27 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kaonpositive.github.io/tags/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Integrals</title>
      <link>https://kaonpositive.github.io/posts/integrals/</link>
      <pubDate>Sun, 27 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/integrals/</guid>
      <description>Integration by Parts Guidelines for selecting u and dv:   Remember &amp;ldquo;L-I-A-T-E&amp;rdquo; where you choose &amp;ldquo;u&amp;rdquo; to be the function that comes first in the list.
 L - Logrithmic Function I - Inverse Trig Function A - Algebraic Function T - Trig Function E - Exponential Function   Example:     Alternative Guidelines for Choosing u and dv:
 dv is the complicated portion of the integrand that can easily be integrated.</description>
    </item>
    
    <item>
      <title>Binary Trees</title>
      <link>https://kaonpositive.github.io/posts/binarytrees/</link>
      <pubDate>Sat, 26 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/binarytrees/</guid>
      <description>What is a binary tree? It is a recursive, non-linear tree data structure where one node is designated as the root and the others are called the children of the root. Each node has AT MOST two children.
What does each node have?  Each node in the tree must have:  Data: Holds the value/data of the associated node Pointer to the left child Pointer to the right child.    C++ Code Example:</description>
    </item>
    
    <item>
      <title>Linked List</title>
      <link>https://kaonpositive.github.io/posts/linkedlist/</link>
      <pubDate>Sat, 26 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/linkedlist/</guid>
      <description>What is a linked-list?  It is a non-contiguous linear data structure where a sequence of nodes are connected to one another via a reference pointer. Each node stores the data and address of the next node.  What does each node have?  A node in a linked-list typically have two components:  Data: Holds the value/data of the associated node Next Pointer: Stores memory address (reference pointer) of the next node in the sequence Head and Tail: The head node will be the way to access the linked list&amp;ndash;it points to the first node of the list.</description>
    </item>
    
    <item>
      <title>Algorithms</title>
      <link>https://kaonpositive.github.io/posts/algos/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/algos/</guid>
      <description>What is an algorithm?  Sequence of steps that transform input into output.  What is time complexity of an algorithm?  Indicates total time needed by program to run to completion. Expressed by using Big O notation.  What are the types of notation used for time complexity?  Big Oh: Fewer than or same as iterations. Big Omega: More than or same as iterations. Big Theta: Same as iterations.</description>
    </item>
    
    <item>
      <title>CS 477 Notes 00</title>
      <link>https://kaonpositive.github.io/posts/cs477notes00/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs477notes00/</guid>
      <description>notes</description>
    </item>
    
    <item>
      <title>Design Patterns</title>
      <link>https://kaonpositive.github.io/posts/designpatterns/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/designpatterns/</guid>
      <description>What is Abstract Factory?  Provide an interface for creating families of related or dependent objects without specifying their concrete classes.  What is an Adapter?  Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn&amp;rsquo;t otherwise because of incompatibility interfaces.  What is a Bridge?  Decouple an abstraction from its implementation so that the two can very independetly.  What is a builder?</description>
    </item>
    
    <item>
      <title>OA Notes</title>
      <link>https://kaonpositive.github.io/posts/oanotes/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/oanotes/</guid>
      <description>review data structures and algorithms.
 strings, lists, trees, queues, stacks, graphs, heaps, hash tables, and hash maps. sorts, searches, recursion, iterative approaches, and traversals (BFS and DFS) understand basic programming concepts time yourself as you will have 120 minutes to complete the assessment. practice different types of questions in the Candidate Prep on HackerRank  </description>
    </item>
    
    <item>
      <title>Stacks and Queue</title>
      <link>https://kaonpositive.github.io/posts/stacksandqueues/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/stacksandqueues/</guid>
      <description>information about stacks and queues.</description>
    </item>
    
    <item>
      <title>Study Plan 75</title>
      <link>https://kaonpositive.github.io/posts/studyplan75/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/studyplan75/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Time Complexity</title>
      <link>https://kaonpositive.github.io/posts/timecomplexity/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/timecomplexity/</guid>
      <description>What is time complexity?   It is the measure of how long an algorithm will run as the size of the input increases&amp;ndash;this examines the proportional time of the largest components of the algorithm.
 Proportional Time: Only being mindful of the running-time of an input of size n, NOT the running-time for a specific input. Example:  int sum{}; for( const auto i : arr ) if( num % 2 == 0 ) sum += num; return sum;  Note: In this example, the loop will iterate the entire array once, so it runs directly proportional to n (linear run time).</description>
    </item>
    
    <item>
      <title>Data Structures</title>
      <link>https://kaonpositive.github.io/posts/datastructures/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/datastructures/</guid>
      <description>What is a data structure?  Used for organization and modification of data.  What are the two types of data structures?  Linear: Elements result in a sequence or linear list. Examples: arrays, linked lists, stacks, etc. Non-linear: Traversal of nodes is not done in a sequential manner. Examples: trees, graphs, etc.  What is an array?  A collection of the same data type that are stored at contiguous memory locations (memory locations are adjacent to each other in memory).</description>
    </item>
    
    <item>
      <title>STATS 411 Notes #00</title>
      <link>https://kaonpositive.github.io/posts/stats411notes00/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/stats411notes00/</guid>
      <description>notes here</description>
    </item>
    
  </channel>
</rss>
