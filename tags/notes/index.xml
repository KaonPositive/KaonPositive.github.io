<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>notes on Jared Rosario</title>
    <link>https://kaonpositive.github.io/tags/notes/</link>
    <description>Recent content in notes on Jared Rosario</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 17 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://kaonpositive.github.io/tags/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CS 460 Notes 00</title>
      <link>https://kaonpositive.github.io/posts/cs460notes00/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs460notes00/</guid>
      <description>Chapter 1 Reading Syntax - Set of rules that describe how symbols can be combined to form a correctly structured program.
 NOTE: In most cases, syntatic rules for a programming language are described using a context-free grammar written in Backus-Nauer Form
 Semantics - Meaning of a syntatically correct program.
 NOTE: Denotational and operational semantics are the most used formal semantics for compiler and interpreter writing.
 Compiling and Interpreting Two ways to execute programs:</description>
    </item>
    
    <item>
      <title>CS 469 Notes 00</title>
      <link>https://kaonpositive.github.io/posts/cs469notes00/</link>
      <pubDate>Wed, 17 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs469notes00/</guid>
      <description>What is Digital Image Processing? Image - a 2D function f(x,y) where x and y represent the coordinates. f would be the amplitude for the given coordinates x and y.
 NOTE: the 2D function f(x,y) (amplitude) is called the intensity/gray level of the image.
 An image is considered a digital image when x, y, and intensity of values are all finite and discrete.
 NOTE: for an analog image: x, y, and intensity of values are continuous.</description>
    </item>
    
    <item>
      <title>Machine Learning Notes</title>
      <link>https://kaonpositive.github.io/posts/generalml/</link>
      <pubDate>Tue, 16 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/generalml/</guid>
      <description>Goal for Machine Learning The goal for machine learning is to help us make decisions with or without human supervision. To achieve this, machine learning uses a group of algorithms/methodologies to discover and formulate repeatable patterns in data.
Unsupervised Learning An algorithm that detects and utilizes data that are not generated randomly, therefore it finds patterns/structure within the data to comprehend it.
 Laymen&amp;rsquo;s Terms: Non-randomly generated data is read and the algorithm will detect certain patterns within the data to better understand it.</description>
    </item>
    
    <item>
      <title>STATS 411 Final Exam Review</title>
      <link>https://kaonpositive.github.io/posts/stats411finalreview/</link>
      <pubDate>Tue, 05 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/stats411finalreview/</guid>
      <description>Binomial Distibution Bernoulli Distribution PMF of Bernoulli: $f_W(w) = P(W = w) = $ p if w = 1; 1 - p if w = 0
$f_W(w) = p^w(1-p)^{1-w} = p^wq^{1-w}$ for w = 0, 1
Random Sample Random Sample and Population Sample are two different things.
For population: $\mu = $ population mean of X $M = $ population median of X $\sigma^2 = $ population variance of X $\sigma = $ population std of X</description>
    </item>
    
    <item>
      <title>CS422 Final Study Guide</title>
      <link>https://kaonpositive.github.io/posts/cs422finalreview/</link>
      <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422finalreview/</guid>
      <description>Logistic Regression Is a classification algorithm.
Is a discriminative classification algorithm that has the form $P(y|x, \theta)$ where $X\in R^D$ (basically, it&amp;rsquo;s continuous and D-dimensional).
 NOTE: Logistic Regression can use categorical inputs. Naive Bayes is a generative algorithm.
 If output size is:
 C = 2, then it is classified as binary logistic regression. C &amp;gt; 2, then it is classified as multi-class logistic regression.  Binary Logistic Regression $P(y|x, \theta)$ = Ber$( y|\mu(x))$</description>
    </item>
    
    <item>
      <title>Sorting Algorithms</title>
      <link>https://kaonpositive.github.io/posts/sortingalgos/</link>
      <pubDate>Sat, 02 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/sortingalgos/</guid>
      <description>Important terms:
 Comparison-based Sorting: Sort elements by comparing them with each other. Non-comparison-based Sorting: Sorts do NOT compare elements with one another.  Selection Sort Is a comparison-based sorting algorithm.
You basically iterate through the array and find the smallest/largest element. If the smallest/largest element is found, exchange it with the first element. Keep doing this until you reach at the end of list.
TLDR; Find smallest element and exchange it with element in the first position; find the second smallest element and exchange it in the second position, etc.</description>
    </item>
    
    <item>
      <title>CS456 Final Study Guide</title>
      <link>https://kaonpositive.github.io/posts/cs456finalreview/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs456finalreview/</guid>
      <description>What is DFA? Known as Deterministic Finite Accepter. It accepts a finite set of internal states
It is a five-tuple, where:
 Q = Finite set of states ${\Sigma}$ = Finite set of input alphabet symbols. ${\sigma}$ = Transition function mapping: ${Q * {\Sigma} -&amp;gt; Q}$ ${q_0 \in Q}$ = is the initial state. F ${\subset}$ ${Q}$ = set of final/accept states. Q($F \subset Q$) Has multiple final states.  What is NFA?</description>
    </item>
    
    <item>
      <title>CS477 Final Study Guide</title>
      <link>https://kaonpositive.github.io/posts/cs477finalreview/</link>
      <pubDate>Mon, 27 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs477finalreview/</guid>
      <description>Time Complexity Implementing Sparse Array w/ Search Structure In terms of implementing a sparse array with a search structure, you can implement any search strcuture as you wish (a search structure must be able have a find function which returns a boolean value. That will indicate whether the item is found or not).
For example, you can implement a sparse array with memos. With these memos, you have pairs (i, A[i]) where i is the query and A[i] is the collection of items/data of said query.</description>
    </item>
    
    <item>
      <title>CS477 Exam 3 Review</title>
      <link>https://kaonpositive.github.io/posts/cs477exam3review/</link>
      <pubDate>Mon, 20 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs477exam3review/</guid>
      <description>Kruskal&amp;rsquo;s Algorithm It is a greedy algorithm that gives an optimal solution for a minimum spanning tree for a connected weighted graph.
Steps to solve Kruskal&amp;rsquo;s Algorithm:
 Sort graph edges in nondecreasing order (from least to greatest). Then, starting with an empty subgraph, it scans the sorted list which adds the next edge on the list to the current subgraph IF it does NOT create a cycle. If the edge does create a cycle, simply just skip it.</description>
    </item>
    
    <item>
      <title>STATS 411 Exam2 Review</title>
      <link>https://kaonpositive.github.io/posts/stats411exam2review/</link>
      <pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/stats411exam2review/</guid>
      <description>Cumulative Density Function Probability Density Function Probability Mass Function Continuous Probability Distributions Joint Probability Distributions Mean of a Random Variable (Expected Value) Let X be a random variable w/ probability distribution f(x). The mean/expected value of X is:
 $\mu = E(X) = \sum_x xf(x)$ if X is discrete $\mu = E(X) = \int_{-\infty}^{\infty}xf(x)dx$ if X is continuous  Difference between sample mean and expected value is sample mean is calculated using data; expected value is calculated using probability distribution.</description>
    </item>
    
    <item>
      <title>STATS 411 Notes 02</title>
      <link>https://kaonpositive.github.io/posts/stats411notes02/</link>
      <pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/stats411notes02/</guid>
      <description>IMPORTANT: For Quiz, questions a, b, and c are on the exam. Also for quiz, instead of leaving answers in exponential form, convert it to decimal.
 Section 5.5 Poisson Distribution and Poisson Process A discrete random variable X is said to have the Poisson distribution w/ parameter $\mu &amp;gt; 0$ if its probability mass function is given by: $P(X = x) = \frac{e^{-\mu}\mu^x}{x!}$ for x in all positive integers</description>
    </item>
    
    <item>
      <title>CS 477 Study Guide</title>
      <link>https://kaonpositive.github.io/posts/cs477notes01/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs477notes01/</guid>
      <description>Recurrences It describes a sequence of numbers. For instance, an example of a recurrence would be: $T_1 = 1$ $T_n = T_{n-1}+1$ for n &amp;gt;= 2
 They are useful to analyze the performance of recursive algorithms
 Anti-Derivative Method Formula is: $f&#39;(x) = \lim_{h-&amp;gt;0}\frac{f(x)-f(x-h)}{h}$
 In terms of asymptotic analysis, in this case, we only need h to be &amp;ldquo;close&amp;rdquo; to zero but still positive. NOTE: h must be smaller than x.</description>
    </item>
    
    <item>
      <title>CS 477 Study Guide</title>
      <link>https://kaonpositive.github.io/posts/cs477notes02/</link>
      <pubDate>Mon, 23 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs477notes02/</guid>
      <description></description>
    </item>
    
    <item>
      <title>CS456 Notes 04</title>
      <link>https://kaonpositive.github.io/posts/cs456notes04/</link>
      <pubDate>Sun, 22 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs456notes04/</guid>
      <description>What are Context-Free Languages? It is a collection of languages that are associated with context-free grammars.
 Includes all regular languages and many additional languages.  Context-Free Grammars It is a 4-tuple where (V, $\sum$, R, S), where:
 V is a finite set called the variables. Is uppercase. $\sum$ is a finite set, disjoint from V, called terminals. Is lowercase. R is a finite set of rules, with each rule being a variable and a string of variables and terminals $S \in V$ is the start variable  What is a derivation?</description>
    </item>
    
    <item>
      <title>Shortest Path</title>
      <link>https://kaonpositive.github.io/posts/shortestpaths/</link>
      <pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/shortestpaths/</guid>
      <description>Djiksta&amp;rsquo;s Algorithm You are given a start vetex $s$, and it finds the shortest path from $s$ to every other vertex in the graph, including your desired destination $t$.
 Shortest Path does not necessarily mean it is the fastest path; it means that the path has the least number of segments (edges).
 Steps for Djikstra&amp;rsquo;s:
 Find the cheapest node starting from the source/start vertex. Update the costs of the neighbors of this node.</description>
    </item>
    
    <item>
      <title>CS 422 Notes 09</title>
      <link>https://kaonpositive.github.io/posts/cs422notes09/</link>
      <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422notes09/</guid>
      <description>Entropy It is the measure of uncertainty in a probability distribution.
Formula: $\mathbb{H}(x) = -\sum_k^kP(X=k)*logp(X=k)$
Gross Entropy Gross Entropy of two distributions P and Q is given by: $\mathbb{H}(p,q) = -\sum_{k=1}^kP_k*log(q_k)$
 Gross Entropy is used as log loss in binary classification.
 Generate Classifier $P(y = c|x, \theta) \alpha P(x|y = c, \theta)P(y=c | \theta)$
 NOTE: Alpha means proportional
 Difference between Discrimitive and Generative Classifiers  Discrimitive Classifier finds a boundry that separates the two classes.</description>
    </item>
    
    <item>
      <title>CS456 Notes 02</title>
      <link>https://kaonpositive.github.io/posts/cs456notes02/</link>
      <pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs456notes02/</guid>
      <description>Related Question: How do you know the given DFA has the smallest number of states?
 Often more than one DFA can be there that recognize the same language.  DFA Minimization Algorithm:  Construct a table being indexed by non-final and final states.   Mark all non-final and final pairs (each pair does not have to be connected to one another; as long as they are non-final and final pairs).</description>
    </item>
    
    <item>
      <title>CS456 Notes 03</title>
      <link>https://kaonpositive.github.io/posts/cs456notes03/</link>
      <pubDate>Mon, 09 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs456notes03/</guid>
      <description>What is a Regular Expression? It is a way of denoting/describing languages. EX: $(0{\cup}1)0^*$ is an example of a regular expression. Says that the language starts with a 0 or a 1 followed by any number of 0s.
Rules for regular expression:
 Empty set ${\empty}$ is a regular expression and denotes language ${\empty}$. Empty string ${\lambda}$ is a regular expression denoting set {${\lambda}$}. Each alphabet a is a regular expression and denotes the set {${a}$}.</description>
    </item>
    
    <item>
      <title>CS 422 Midterm Review</title>
      <link>https://kaonpositive.github.io/posts/cs422midtermreview/</link>
      <pubDate>Tue, 03 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422midtermreview/</guid>
      <description>What is Supervised Learning? Function that perfectly maps each input to its output.
 Supervised Learning Algorithms work with input-output pairs!
 f* &amp;lt;- model&amp;rsquo;s approximation x (bold lowercase) = input vector y = output (typically scalar unless output is multi-dimensional)
What is a model parameter? Variable which can be estimatted by fitting given data to model.
 ex: $f(x) = mx+c$, where x = independent variable, c = dependent   m and c are parameters.</description>
    </item>
    
    <item>
      <title>CS 422 Notes 07</title>
      <link>https://kaonpositive.github.io/posts/cs422notes07/</link>
      <pubDate>Tue, 03 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422notes07/</guid>
      <description>Statistics The task of estimating the parameters ($\theta$) from the training data is called training\model fitting.
$\hat{\theta} = argmin L ({\theta})$
 $\hat{\theta}$ = estimated parameter $L = $ Loss Function (aka objective/cost function)  argmin $f(\theta)$ returns $\theta$ that minimizes $L(\theta)$. Ex: argmin $x^2$ = 0
Maximum Likelihood Estimate (MLE) Refers to finding parameters that maximizes one likelihood of training data. It is the most common approach to parameter estimation.</description>
    </item>
    
    <item>
      <title>CS 422 Notes 08</title>
      <link>https://kaonpositive.github.io/posts/cs422notes08/</link>
      <pubDate>Tue, 03 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422notes08/</guid>
      <description>Bayesian Decision Theory Allows to choose the best action based on the given situation.
 Baye&amp;rsquo;s Rule will show up on the exam. An example of Baye&amp;rsquo;s rule is on Section 2.3.1 of the textbook (COVID-19).
 </description>
    </item>
    
    <item>
      <title>CS 422 Notes 06</title>
      <link>https://kaonpositive.github.io/posts/cs422notes06/</link>
      <pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422notes06/</guid>
      <description>Bernoulli Distribution Used to represent the distribution of a binary outcome. For example, tossing a coin.
 y = 1 &amp;lt;- &amp;lsquo;heads&amp;rsquo; $P(y=1) = \theta$ y = 0 &amp;lt;- &amp;lsquo;tails&amp;rsquo; $P(y=0) = 1 - \theta$  PMF is defined as: $P(y | \theta) = \theta$ if $y = 1$ $P(y | \theta) = 1 - \theta$ if $y = 0$
Binomial Distributions Used to represent the distribution of a repeated binary outcome.</description>
    </item>
    
    <item>
      <title>CS 422 Notes 05</title>
      <link>https://kaonpositive.github.io/posts/cs422notes05/</link>
      <pubDate>Thu, 21 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422notes05/</guid>
      <description>Random Variables It is a variable that has unknown/random quantity of interest.
${\mathcal X}$: the set of all possible values. Also called a sample space or static space.
Discrete Random Variables Sample space is finite/countably infinite (${\mathcal X}$). Probability of event X = x is denoted by $P(X=x)$ or $P(x)$ for short.
 x: Random Variable (ex: heads/tails) ${\mathcal X}$: Sample Space (ex: S={Heads, Tails}) x (small x) -&amp;gt; x: one of the possible values (ex: x=heads, or x = tails)  Continuous Random Variables If x (a random variable) ${\in\mathbb{R}}$ is a real-valued quantity, it is called a continous random variable.</description>
    </item>
    
    <item>
      <title>CS 422 Notes 04</title>
      <link>https://kaonpositive.github.io/posts/cs422notes04/</link>
      <pubDate>Tue, 19 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422notes04/</guid>
      <description>Probability Probability quantifies uncertainty.
 Probability is between 0 and 1.
 P(A): Probability that the event A will occur.
 0 &amp;lt;= P(A) &amp;lt;= 1  P(${A&#39;}$): Probability that the event A will NOT occur.
 $0 &amp;lt;= P({A^c}) &amp;lt;= 1$ $P(A) + P({A^c}) = 1$ $P({A^c}) = 1 - P(A)$  Joint Probability Define probability of two events occuring at the same time. ${P(A \cap B}) = P(A, B)$</description>
    </item>
    
    <item>
      <title>CS 422 Notes 03</title>
      <link>https://kaonpositive.github.io/posts/cs422notes03/</link>
      <pubDate>Thu, 14 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422notes03/</guid>
      <description>What is Unsupervised Learning? It is a learning model where it is trained ONLY on the inputs.
 REMEMBER: Supervised learning uses input-output pairs to parameterize the model for improvement.
  Ex of Unsupervised Learning: Music recommendations by using clusters of users that have similar music taste.  What is Clustering? No classification exists to determine data clusters. Therefore, it is a challenge to separate data in their respective classes/groups.</description>
    </item>
    
    <item>
      <title>CS 422 Notes 02</title>
      <link>https://kaonpositive.github.io/posts/cs422notes02/</link>
      <pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422notes02/</guid>
      <description>$ {y_n} = f({x_n})$ where $f$ is the fuction we assume exist and try to approximate.
$ \hat{y_n} = f^({x_n})$ where $ \hat{y_n} $ is the prediction and $ f^ $ is the model&amp;rsquo;s approximation.
If we try to get comparisons for a data instance, we try to find the best line that fits the data instance the best.
 Ex: you will prefer a function over another function since data is closests to it.</description>
    </item>
    
    <item>
      <title>STATS 411 Notes 01</title>
      <link>https://kaonpositive.github.io/posts/stats411notes01/</link>
      <pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/stats411notes01/</guid>
      <description>notes</description>
    </item>
    
    <item>
      <title>Leetcode Doc</title>
      <link>https://kaonpositive.github.io/posts/leetcode/</link>
      <pubDate>Sun, 10 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/leetcode/</guid>
      <description>notes</description>
    </item>
    
    <item>
      <title>CS456 Notes 01</title>
      <link>https://kaonpositive.github.io/posts/cs456notes01/</link>
      <pubDate>Thu, 07 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs456notes01/</guid>
      <description>What is a Finite State Machine/Finite Automata? What is a Power-Set? Power set of ${2^s}$ of set s is the set of all subsets of S. Examples: ${S_1} = $ {a, b} ${2^{S_1}} = $ {{a}, {b}, {ab}, {0}} ${2^2} = 4$ total elements
${S_2} = $ {a, b, c} ${2^{S_2}} = $ {{0}, {a}, {b}, {c}, {a,b}, {a,c}, {b,c}, {a,b,c}, } ${2^3} = 8$ total elements
What are features of deterministic accepters?</description>
    </item>
    
    <item>
      <title>CS 422 Notes 01</title>
      <link>https://kaonpositive.github.io/posts/cs422notes01/</link>
      <pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422notes01/</guid>
      <description>Supervised Learning continued&amp;hellip;  x $ {\in} $ X (capital X is the input space) y $ {\in} $ Y (capital Y is the output space)   Basically, the input space is the set of possible inputs; output space is the set of possible outputs.
  D = {(${x_n}, {y_n}$)}${_n}^{N}$ is the set of all input-output pairs.  N is the dataset size and D is script D.</description>
    </item>
    
    <item>
      <title>STATS 411 Notes 00</title>
      <link>https://kaonpositive.github.io/posts/stats411notes00/</link>
      <pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/stats411notes00/</guid>
      <description>What are Individuals/subjects/objects? They are units described by a set of data.
 These units can be people, things, animals, companies, etc. They are actual nouns.
  Examples of individuals/subjects/objects: Freshman students, companies, cells, etc.  What are variables? They are characteristics of individuals/subjects/objects. They can either be qualitative or quantitative (categorical)
 Quantitative: can be counted (number of things)  Ex: age (in years), length (in m), number of children, etc.</description>
    </item>
    
    <item>
      <title>CS 422 Notes 00</title>
      <link>https://kaonpositive.github.io/posts/cs422notes00/</link>
      <pubDate>Thu, 31 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs422notes00/</guid>
      <description>What is Machine Learning? By definition from Tom Mitchell:
 A computer program is learning form experience E w/ respect to some class of tasks T, and performance measure P, if its performance at tasks in T, as measured by P, improves w/ experience E.
 Breaking it down into simple terms&amp;hellip;
 You improve over tasks T.   Ex: Predicting the price of the house in the market.  W/ repect to some performance P   Ex: How much the house is sold for.</description>
    </item>
    
    <item>
      <title>CS 477 Notes 00</title>
      <link>https://kaonpositive.github.io/posts/cs477notes00/</link>
      <pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs477notes00/</guid>
      <description>Types of Running Time:  O(n) - Worst-case Running Time   f(n) = O(g(n)) Grows no faster than n Describes the upper bound It is the maximum number of steps taken in any instance of size n&amp;ndash;calculates the maximum time an algorithm takes to complete execution. Formal Definition of O(n):  f(n) &amp;lt;= c*g(n) for all n &amp;gt;= n0 where n0 can be some number greater than 0 and c is some constant Ex: f(n) = 2n + 3; g(n) = n 2n + 3 &amp;lt;= 10n, which is true    $ \Omega $(n) - Best-case Running Time   f(n) = $ \Omega $(g(n)) Grows at least as fast as n Describes the lower bound Calculates the shortest time an algorithm takes to complete execution Formal Definition of $ \Omega $(n):  f(n) &amp;gt;= c*g(n) for all n &amp;gt;= n0 where n0 can be some number greater than 0 and c is some constant    $ \Theta $(n) - Expected-case Running Time   f(n) = $ \Theta $(g(n)) Means both $ \Omega $(n) and O(n) Gives the average bound (expresses lower and upper bound of algorithm&amp;rsquo;s run time).</description>
    </item>
    
    <item>
      <title>CS456 Notes 00</title>
      <link>https://kaonpositive.github.io/posts/cs456notes00/</link>
      <pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/cs456notes00/</guid>
      <description>What is an alphabet?  It is a non-empty finite set of symbols. Use ${\Sigma}$ to denote the alphabet. Ex:  $\Sigma$ = {0,1} $\Sigma$ = {a, b, c} $\Sigma$ = {a, b, c, &amp;hellip; z}    What is a string?  It is a finite sequence of symbols from an alphabet. Ex: $\Sigma$ = {a, b, c}  w1 = &amp;ldquo;abc&amp;rdquo; - This is a string of 3 symbols.</description>
    </item>
    
    <item>
      <title>Integrals</title>
      <link>https://kaonpositive.github.io/posts/integrals/</link>
      <pubDate>Sun, 27 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/integrals/</guid>
      <description>Integration by Parts Guidelines for selecting u and dv:   Remember &amp;ldquo;L-I-A-T-E&amp;rdquo; where you choose &amp;ldquo;u&amp;rdquo; to be the function that comes first in the list.
 L - Logrithmic Function I - Inverse Trig Function A - Algebraic Function T - Trig Function E - Exponential Function   Example:     Alternative Guidelines for Choosing u and dv:
 dv is the complicated portion of the integrand that can easily be integrated.</description>
    </item>
    
    <item>
      <title>Binary Trees</title>
      <link>https://kaonpositive.github.io/posts/binarytrees/</link>
      <pubDate>Sat, 26 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/binarytrees/</guid>
      <description>What is a binary tree? It is a recursive, non-linear tree data structure where one node is designated as the root and the others are called the children of the root. Each node has AT MOST two children.
What does each node have?  Each node in the tree must have:  Data: Holds the value/data of the associated node Pointer to the left child Pointer to the right child.    C++ Code Example:</description>
    </item>
    
    <item>
      <title>Linked List</title>
      <link>https://kaonpositive.github.io/posts/linkedlist/</link>
      <pubDate>Sat, 26 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/linkedlist/</guid>
      <description>What is a linked-list?  It is a non-contiguous linear data structure where a sequence of nodes are connected to one another via a reference pointer. Each node stores the data and address of the next node.  What does each node have?  A node in a linked-list typically have two components:  Data: Holds the value/data of the associated node Next Pointer: Stores memory address (reference pointer) of the next node in the sequence Head and Tail: The head node will be the way to access the linked list&amp;ndash;it points to the first node of the list.</description>
    </item>
    
    <item>
      <title>Algorithms</title>
      <link>https://kaonpositive.github.io/posts/algos/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/algos/</guid>
      <description>What is an algorithm?  Sequence of steps that transform input into output.  What is time complexity of an algorithm?  Indicates total time needed by program to run to completion. Expressed by using Big O notation.  What are the types of notation used for time complexity?  Big Oh: Fewer than or same as iterations. Big Omega: More than or same as iterations. Big Theta: Same as iterations.</description>
    </item>
    
    <item>
      <title>Design Patterns</title>
      <link>https://kaonpositive.github.io/posts/designpatterns/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/designpatterns/</guid>
      <description>What is Abstract Factory?  Provide an interface for creating families of related or dependent objects without specifying their concrete classes.  What is an Adapter?  Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn&amp;rsquo;t otherwise because of incompatibility interfaces.  What is a Bridge?  Decouple an abstraction from its implementation so that the two can very independetly.  What is a builder?</description>
    </item>
    
    <item>
      <title>OA Notes</title>
      <link>https://kaonpositive.github.io/posts/oanotes/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/oanotes/</guid>
      <description>review data structures and algorithms.
 strings, lists, trees, queues, stacks, graphs, heaps, hash tables, and hash maps. sorts, searches, recursion, iterative approaches, and traversals (BFS and DFS) understand basic programming concepts time yourself as you will have 120 minutes to complete the assessment. practice different types of questions in the Candidate Prep on HackerRank  </description>
    </item>
    
    <item>
      <title>Stacks and Queue</title>
      <link>https://kaonpositive.github.io/posts/stacksandqueues/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/stacksandqueues/</guid>
      <description>information about stacks and queues.</description>
    </item>
    
    <item>
      <title>Study Plan 75</title>
      <link>https://kaonpositive.github.io/posts/studyplan75/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/studyplan75/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Time Complexity</title>
      <link>https://kaonpositive.github.io/posts/timecomplexity/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/timecomplexity/</guid>
      <description>What is time complexity?   It is the measure of how long an algorithm will run as the size of the input increases&amp;ndash;this examines the proportional time of the largest components of the algorithm.
 Proportional Time: Only being mindful of the running-time of an input of size n, NOT the running-time for a specific input. Example:  int sum{}; for( const auto i : arr ) if( num % 2 == 0 ) sum += num; return sum;  Note: In this example, the loop will iterate the entire array once, so it runs directly proportional to n (linear run time).</description>
    </item>
    
    <item>
      <title>Data Structures</title>
      <link>https://kaonpositive.github.io/posts/datastructures/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://kaonpositive.github.io/posts/datastructures/</guid>
      <description>What is a data structure?  Used for organization and modification of data.  What are the two types of data structures?  Linear: Elements result in a sequence or linear list. Examples: arrays, linked lists, stacks, etc. Non-linear: Traversal of nodes is not done in a sequential manner. Examples: trees, graphs, etc.  What is an array?  A collection of the same data type that are stored at contiguous memory locations (memory locations are adjacent to each other in memory).</description>
    </item>
    
  </channel>
</rss>
